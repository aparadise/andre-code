Java has 9 primative data types: byte, short, int, long, float, double, char, boolean, string

* scanner util is for allowing users to type user input: import java.util.scanner


* static Scanner userInput = new Scanner(system.in) // means to collect the user imput


*you can import the one java util or all of them. 
to import all of them type: import 


* use the 'static' when the value will always stay the same or it will always be updated but it stands alone
and does not need to be part of the function. for examples: protected staic int foo = 0;

* "protected" means it can ONLY be used by classes in the same folder.

* public Animal(){
   super(); // means it inheartes from a master java class: public class Dog extends Animals{}


* this is called "inheartance:  public class Dog extends Animals{} 



* "private" means that it can ONLY be used in that class.


/* how to print a string */

public class Hello {
    public static void main(String[] args){
        System.out.println("Hello Andre!");
    }
}

/* how to declair a variable and print it */

public class Hello {
    public static void main(String[] args){
        System.out.println("Hello Andre.!");

        // in java you have to name the 'data type' as your variable so for this example we tell 
java that we want data type of 'int' for hole number without a decimal. and give it a variable name then assign the number number

        int myfirstNumberVariable =  5;

        //i can also type the short cut key built in 'sout' and that will give me the 'System.out.println();'
        System.out.println(myfirstNumberVariable);
    }
}


/* how to do math */


public class Hello {
    public static void main(String[] args){
        System.out.println("Hello Andre.!");

        // in java you have to name the 'data type' as your variable so for this example we tell java that we want data type of 'int' for hole number without a decimal. 
and give it a variable name then assign the number number

        int myfirstNumberVariable =  5 + 5;

        //i can also type the short cut key built in 'sout' and that will give me the 'System.out.println();'
        System.out.println(myfirstNumberVariable);
    }
}


/* more math */


/* how to do math */


/* note... int can store - 2.174billion to + 2.174billion in memory space */

/* the smalles number in int is -2147483648 */

public class Hello {
    public static void main(String[] args){
        System.out.println("Hello Andre.!");

        // in java you have to name the 'data type' as your variable so for this example we tell java that we want data type of 'int' for hole number without a decimal. and give it a variable name then assign the number number
        int myfirstNumberVariable =  (5 + 5) + (2*6);

        //i can also type the short cut key built in 'sout' and that will give me the 'System.out.println();'
        System.out.println(myfirstNumberVariable);
    }
}


/* more math note: java likes to keep humpCase word to be a capital */
/* also if you dont use a variable it will also be grayed out to let you know */

public class Hello {
    public static void main(String[] args){
        System.out.println("Hello Andre.!");

        // in java you have to name the 'data type' as your variable so for this example we tell java that we want data type of 'int' for hole number without a decimal. and give it a variable name then assign the number number
        int myFirstNumberVariable =  (5+7) +(3*8);
        int mySecondNumber = 12;
        int myThirdNumber = 99;
        int myTotalNumber = myFirstNumberVariable + mySecondNumber + myThirdNumber;

        //i can also type the short cut key built in 'sout' and that will give me the 'System.out.println();'
        System.out.println(myTotalNumber);
    }
}



/* data types: int, byte, short and long. And how to over write your data type using a casting. */


public class Main {

    public static void main(String[] args) {
	// write your code here
        //int is between -2147483648 and 2147483647
        // int has a width of 32
        int myMinValue = -2147_4_836_9; //this number is to large for int in memory even though its a negative number
        int myMaxValue = 214_748_3647; //this number is to large for int in memory for positive
        int myTotal = (myMinValue/2);
        System.out.println("myTotal = " + myTotal);

        //byte takes up smaller space can only store a number from -128 to 127
        //byte has width of 8
        byte myByteValue = -128;
       // byte myByteValueBigger = (myByteValue/2); //notice the error here. this error is because the value exceeds the memory for a byte so you must use "casting" to force it work and stay the data type you want
        byte myByteValueBigger = (byte) (myByteValue/2); //notice the error is gone since we used 'casting' by typind the data type before the value {byte)
        System.out.println("myByteValueBigger = " + myByteValueBigger );
        
        //short -32768 to 32767
        //short has width of 16
        short myShortValue = 30000;
        System.out.println("myShortValue = " + myShortValue);

        //long value you MUST put "L" or small "l" after the number
        // store large numbers -9223-372-036-854-775-808L to 9223-372-036-854-775-807L
        //long has width of 64
        long myLongValue = 100L;
        System.out.println("myLongValue = " + myLongValue);
        
        // NOTE: using 'int' is usally the best way to go unless you know exactly what you want.

    }
}


/* floats and double */


public class Main {

    public static void main(String[] args) {
	// write your code here

        // java has two types of floating dec points
        //floats are for single and double is double

        int myIntValue = 5;
        float myFloatValue = 5.25f;
        float myFloatValueCastingExample = (float) 5.4
        double myDoubleValue = 5.25;
        double myDoubleValueSecondExample = 5.25;

        System.out.println(myFloatValue);
    }
}



public class Main {

    public static void main(String[] args) {
	// write your code here

        // java has two types of floating dec points
        //floats are for single and double is double

        int myIntValue = 5;
        float myFloatValue = 5f;
        double myDoubleValue = 5d;

        System.out.println(myIntValue);
        System.out.println(myFloatValue);
        System.out.println(myDoubleValue);
    }
}


public class Main {

    public static void main(String[] args) {
	// write your code here

        // java has two types of floating dec points
        //floats are for single and double is double

        int myIntValue = 5 /2; //this will NOT have a remainder just a hole number
        float myFloatValue = 5f / 2f;
        double myDoubleValue = 5d /2d;

        System.out.println(myIntValue);
        System.out.println(myFloatValue);
        System.out.println(myDoubleValue);
    }
}



public class Main {

    public static void main(String[] args) {
	// write your code here

        // java has two types of floating dec points
        //floats are for single and double is double

        //width of int = 32 (4 bytes)

        int myIntValue = 5 /3; //this will NOT have a remainder just a hole number
        
         // width of float = 32 (4 bytes)
        float myFloatValue = 5f /3f; //more of floating point
        
         // width of double = 64 (8 bytes)
         // note: if your going to use a floating point you should use a 'double" because its faster and much acurate.
        double myDoubleValue = 5d /3d; //this gives you even a longer floating point

        System.out.println(myIntValue);
        System.out.println(myFloatValue);
        System.out.println(myDoubleValue);
    }
}


/* Char And Boolean */

public class Main {

    public static void main(String[] args) {
	// write your code here

 // 'char' rules ONLY a single letter or or special you CAN NOT have more than one unless its a uni-code characters like this "\0ADE"
        char myChar = 'A';
        char myCharUniCode = '\u00A9';

        System.out.println(myCharUniCode);

        boolean myBoolean = true;

    }
}


/* strings */

public class Main {

    public static void main(String[] args) {
	// write your code here

 // note once you define a string with a variable in memory you can just re-use the variable name
        
        String myString = "this is a string";
        System.out.println(myString + " add more stuff");
        
        String myString2 = "\u00A9 2015";
        System.out.println(myString2);

        myString2 = myString2 + " test"; //notice the variable name is already in memory so i used without recalling String
        System.out.println(myString2);

    }
}


public class Main {

    public static void main(String[] args) {
        // write your code here

        // REMEMBER: anything after the "=" on the right becomes a value and the variable on the left of the "=" sign is the variable that hold the value

        int result = 2 + 1;
        System.out.println(result);

        result = result + 5;
        System.out.println(" my result: " + result);

        result = result / 2;
        System.out.println(" my result: " + result);

        result = result % 3; // % means ONLY give me the remainder
        System.out.println(" my result using % = " + result);

        result++;
        System.out.println(result);

        result--;
        System.out.println(result);

        result +=2;
        System.out.println( " increment by (2) " + result);
        
        result -=2;
        System.out.println( " deincrement by (2) " + result);

        result *=10;
        System.out.println( " multiply by (10) " + result);

        boolean isAlien = false;
        if(isAlien == false)
            System.out.println("It is NOT and alien " + isAlien);

        //note if this is true and you don't give it else nothing will get printed

        int topScore = 100;
        if(topScore != 100)
            System.out.println("you got the high score");

        int topScore2 = 100;
        if(topScore2 > 100)
            System.out.println("you got the high score");
      
        topScore2 = 100; //remeber the variable is set in memory so DO NOT type 'int' again or you will get error
        if(topScore2 >= 100)
            System.out.println("you got the high score or equal");

        boolean isCar = true;
        boolean wasCar = isCar ? true : false;
        if(wasCar)
            System.out.println(" this will only print if its (true) ");   


        double mina = 20d;
        double mason = 80d;
        double totalKids = (mina + mason) * 25d;
        System.out.println(totalKids);

        double myRemainder = totalKids % 40d;
        System.out.println(myRemainder);

        if( (myRemainder == 20) || (myRemainder < 20) )
            System.out.println("total was over the limit");

        // or i could had written it like this
        if( myRemainder <= 20 )
            System.out.println("total was over the limit... i wrote this value check differently");



    }
}


/* valid expressions */

public class Main {

    public static void main(String[] args) {
	// write your code here
        
        //which part of the lines are valid expressions
        
        int score = 100; // score = 100; (is the expression)

        if(score > 99) //score > 99 (is the expression)
            System.out.println("you got high score"); //"you got high score" (is the expression)

        score = 0; //score = 0; (is the expression)
    }
}


/* block scoping with if else and else if */

public class Main {

    public static void main(String[] args) {
	// write your code here

        boolean gameOver = true;
        int score = 5000;
        int levelComplted = 5;
        int bonus = 100;
        String winner = " winner ";

        if(score == 400){
            System.out.println("your score is 5000");
        }else if(score <= 100){
            System.out.println("your score is 100 or less");
        }else {
            System.out.println("your score was less than 5000 " + winner);
        }

        //re-use the variable
       
        score = 1000;
        levelComplted = 25;
        bonus = 750;
        String loser = " loser ";

        if(gameOver){
            int finalScore = score + (levelComplted * bonus);
            System.out.println("your final score was " + loser + finalScore );
        }
        
  }
}



/* methods : notice how each code is run line by line and once it gets to the child method "calculateScore()" it 
jumps down and runs the code function method and comes backup and runs the rest of the code that is in the parent method */



public class Main {

    public static void main(String[] args) {
        // write your code here

        boolean gameOver = true;
        int score = 5000;
        int levelComplted = 5;
        int bonus = 100;
        String winner = " winner ";

        if (score == 400) {
            System.out.println("your score is 5000");
        } else if (score <= 100) {
            System.out.println("your score is 100 or less");
        } else {
            System.out.println("your score was less than 5000 " + winner);
        }

        //reuse the variable
        
        score = 1000;
        levelComplted = 25;
        bonus = 750;
        String loser = " loser ";

        calculateScore(); //notice the editor (intelliJ) changed color to let you know your calling a method

      // i commented out this if statement code block because I do not need it. I put it in the new calculateScore() method
      
    /*  if (gameOver) {
             int finalScore = score + (levelComplted * bonus);
            System.out.println("your final score was " + loser + finalScore);
        }*/

        if (gameOver) {
            int finalScore = score + (levelComplted * bonus);
            System.out.println("your final score was " + loser + finalScore);
        }


    }



       //create new method inside the parent method
        public static void calculateScore(){

            boolean gameOver = true;
            int score = 5000;
            int levelComplted = 5;
            int bonus = 100;
            String winner = " winner ";
            String loser = " loser ";

            if (gameOver) {
                int finalScore = score + (levelComplted * bonus);
                System.out.println("your final score was in method block called calculateScore() " + loser + finalScore);
            }

    }

  }


/* passing arrgument to the methods */

public class Main {

    public static void main(String[] args) {
	// write your code here
        System.out.println("my bank $5,000 loan with interest rate of 12% = " + bankLoan(5000.00, 12.0));
    }

    public static double bankLoan(double loan, double interestRate){
        return ( loan * ( interestRate/100) );
    }

}



public class Main {

    public static void main(String[] args) {
        // write your code here

        boolean gameOver = true;
        int score = 5000;
        int levelCompleted = 5;
        int bonus = 100;
        String winner = " winner ";

        if (score == 400) {
            System.out.println("your score is 5000");
        } else if (score <= 100) {
            System.out.println("your score is 100 or less");
        } else {
            System.out.println("your score was less than 5000 " + winner);
        }

        //reuse the variable
        score = 1000;
        levelCompleted = 25;
        bonus = 750;
        String loser = " loser ";

        //passing arguments to the methods
        calculateScore(true, 5000, 5, 100); //notice the editor (intelliJ) changed color to let you know your calling a method

      // i commented out this if statement code block because I do not needed it. I put it in the new calculateScore() method
        /*  if (gameOver) {
             int finalScore = score + (levelComplted * bonus);
            System.out.println("your final score was " + loser + finalScore);
        }*/

        if (gameOver) {
            int finalScore = score + (levelCompleted * bonus);
            System.out.println("your final score was " + loser + finalScore);
        }


    }



       //create new method inside the parent method
        public static void calculateScore(boolean gameOver, int score, int levelCompleted, int bonus  ){

            String winner = " winner ";
            String loser = " loser ";

            if (gameOver) {
                int finalScore = score + (levelCompleted * bonus);
                System.out.println("your final score was in method block called passing agreements to calculateScore() " + loser + finalScore);
            }

    }

  }



/* calling the method more than once with argeements */


public class Main {

    public static void main(String[] args) {
        // write your code here

        boolean gameOver = true;
        int score = 5000;
        int levelCompleted = 5;
        int bonus = 100;
        String winner = " winner ";

        if (score == 400) {
            System.out.println("your score is 5000");
        } else if (score <= 100) {
            System.out.println("your score is 100 or less");
        } else {
            System.out.println("your score was less than 5000 " + winner);
        }

        //reuse the variable
        score = 1000;
        levelCompleted = 25;
        bonus = 750;
        String loser = " loser ";

        //passing arguments to the methods
        calculateScore(true, 5000, 5, 100); //notice the editor (intelliJ) changed color to let you know your calling a method
       
        calculateScore(true, 1000, 25, 750);

    }

    //create new method inside the parent method
    public static void calculateScore(boolean gameOver, int score, int levelCompleted, int bonus) {

        String winner = " winner ";
        String loser = " loser ";

        if (gameOver) {
            int finalScore = score + (levelCompleted * bonus);
            System.out.println("your final score was in method block called passing agreements to calculateScore() " + loser + finalScore);
        }

    }

}

/* cleaning up the method without having to use the variables */

public class Main {

    public static void main(String[] args) {
        // write your code here

        String winner = " winner ";

        //passing arguments to the methods
        calculateScore(true, 5000, 5, 100); //notice the editor (intelliJ) changed color to let you know your calling a method
        calculateScore(true, 1000, 25, 750);

    }

    //create new method inside the parent method
    public static void calculateScore(boolean gameOver, int score, int levelCompleted, int bonus) {

        String winner = " winner ";
        String loser = " loser ";

        if (gameOver) {
            int finalScore = score + (levelCompleted * bonus);
            System.out.println("your final score was in method block called passing agreements to calculateScore() " + loser + finalScore);
        }

    }

}

/* reusing the variables to pass arreguments in much easier to read code */

public class Main {

    public static void main(String[] args) {
        // write your code here

        boolean gameOver = true;
        int score = 5000;
        int levelCompleted = 5;
        int bonus = 100;
        String winner = " winner ";

         //passing arguments to the methods
        calculateScore(gameOver, score, levelCompleted, bonus); //notice the editor changed color to let you know your calling a method

        //reuse the variables and call the function again
        gameOver = true;
        score = 5;
        levelCompleted = 15;
        bonus = 43100;
        calculateScore(gameOver, score, levelCompleted, bonus);

    }

    //create new method inside the parent method
    public static void calculateScore(boolean gameOver, int score, int levelCompleted, int bonus) {

        String winner = " winner ";
        String loser = " loser ";

        if (gameOver) {
            int finalScore = score + (levelCompleted * bonus);
            System.out.println("your final score was in method block called passing agreements to calculateScore() " + loser + finalScore);
        }

    }

}


/* how to return else statement if something is false in the method */
/* note: you MUST change "void" to "int" if your returning else statment value when passing argeement because the key word "void" means DO NOT return a value */


public class Main {

    public static void main(String[] args) {
        // write your code here

        boolean gameOver = true;
        int score = 5000;
        int levelCompleted = 5;
        int bonus = 100;
        String winner = " winner ";

         //passing arguments to the methods
        calculateScore(gameOver, score, levelCompleted, bonus); //notice the editor changed color to let you know your calling a method

        //reuse the variables and call the function again
        //I used the return statement then else statement in the method to return if the gameOver is false
        gameOver = false;
        score = 5;
        levelCompleted = 15;
        bonus = 43100;
        calculateScore(gameOver, score, levelCompleted, bonus);

    }

    //create new method inside the parent method
    public static int calculateScore(boolean gameOver, int score, int levelCompleted, int bonus) {

        String winner = " winner ";
        String loser = " loser ";

        if (gameOver) {
            int finalScore = score + (levelCompleted * bonus);
            System.out.println("your final score was in method block called passing agreements to calculateScore() " + loser + finalScore);
       return finalScore;
        }else {
            return -1;
        }

    }

}


/* give a variable to hold the method and print out the variable with the value */


public class Main {

    public static void main(String[] args) {
        // write your code here

        boolean gameOver = true;
        int score = 5000;
        int levelCompleted = 5;
        int bonus = 100;
        String winner = " winner ";

         //passing arguments to the methods
       // can also use a variable to hold the function
        int highScore = calculateScore(gameOver, score, levelCompleted, bonus); //notice the editor (intelliJ) changed color to let you know your calling a method
        System.out.println(highScore);

        //reuse the variables and call the function again
        //I used the return statement then else statement in the method to return if the gameOver is false
        gameOver = false;
        score = 5;
        levelCompleted = 15;
        bonus = 43100;

        highScore = calculateScore(gameOver, score, levelCompleted, bonus); //notice the editor (intelliJ) changed color to let you know your calling a method
        System.out.println(highScore);


    }

    //create new method inside the parent method
    public static int calculateScore(boolean gameOver, int score, int levelCompleted, int bonus) {

        String winner = " winner ";
        String loser = " loser ";

        if (gameOver) {
            int finalScore = score + (levelCompleted * bonus);
            System.out.println("your final score was in method block called passing agreements to calculateScore() " + loser + finalScore);
       return finalScore;
        }else {
            return -1;
        }

    }

}


/*  replacing the key word 'void' with 'int' and passing argeements to methods */
/* read the passing of argeements VERY CAREFULLY */
/* study this very carefully how i am finding condition statement and then giving it a return */

public class Main {

    public static void main(String[] args) {
        // write your code here

       int highScorePosition = calculateHighScorePosition(15);
        displayHighScorePosition("Tony ", highScorePosition);

        highScorePosition = calculateHighScorePosition(5500);
        displayHighScorePosition("Andre ", highScorePosition);

        highScorePosition = calculateHighScorePosition(150);
        displayHighScorePosition("Josiah ", highScorePosition);

        highScorePosition = calculateHighScorePosition(100);
        displayHighScorePosition("Mason ", highScorePosition);

    }

    public static void displayHighScorePosition(String playerName, int highScorePosition){
        //code
        System.out.println(" the player name is " + playerName + "and his position is " + highScorePosition );
    }

    // note: VERY IMPORTANT to remember if you change the public static from 'void' to 'int' YOU MUST finish
      conditions with the key word 'return' with int value thats because changed it from 'void' to 'int'
    
       public static int calculateHighScorePosition(int myScore){
        //code
        if(myScore >=1000){
            System.out.println( myScore + " greater than 100");
            return 1;
        }else if (myScore >= 500 ){
            System.out.println( myScore + " greater than 500");
            return 2;
        }else if( (myScore >= 500) && (myScore <1000) ){
            System.out.println(myScore + " greater than 500 and less than 100");
            return 3;
        }else if((myScore >= 100) && (myScore < 500)){
        System.out.println( myScore + " greater than 100 less than 500" );
            return 4;
     }else{
            System.out.println( "fuck you and your score " + myScore );
            return 5;
        }
    }

}

/* method overloading  is when you use the same method name with different paramenters/argeements */

public class Main { /* part 1 of using a return statement in java */

    public static void main(String[] args) {
	// write your code here

        calculateScore("andre", 29);
        
    }

    public static int calculateScore(String playerName, int score){
        System.out.println("player: " + playerName + " score is: " + score);
        return score * 1000; //remember that you must add a return if your making method with "int" to be valid. HOWEVER... you need to pass it back above to the function itself with a variable to return the value of the return statement to the screen. look at the next method for example
    }
}




public class Main { /* part 2 how to return the value with the return statement with a variable and key word "int" */

    public static void main(String[] args) {
	// write your code here
           
              int returnTheReturnStatementValue = calculateScore("andre", 29);
             System.out.println(returnTheReturnStatementValue); // you need a variable in order to return the value of the return statement with the keyword "int"!
        
    }

    public static int calculateScore(String playerName, int score){
        System.out.println("player: " + playerName + " score is: " + score);
        return score * 1000;
    }
}


/* more overloading  examples */


public class Main {

    public static void main(String[] args) {
	// write your code here
        
        //notice in "method overloading we can use the same method name BUT we must pass a different amount or parameters/argeements
        
        int returnTheReturnStatementValue = calculateScore("andre", 29);
            System.out.println(returnTheReturnStatementValue);

            returnTheReturnStatementValue = calculateScore(50);
            System.out.println(returnTheReturnStatementValue);

            returnTheReturnStatementValue = calculateScore();
            System.out.println(returnTheReturnStatementValue);
    }

    public static int calculateScore(String playerName, int score){
        System.out.println("player: " + playerName + " score is: " + score);
        return score * 1000;
    }

    public static int calculateScore(int score){ //this public static "int" could called as 'double' public statid double(double score);
        System.out.println("player score is: " + score);
        return score * 1000;
    }

    public static int calculateScore(){
        System.out.println("player score is: ");
        return 0;
    }
}


/* switch , while loops and for loops */

public class Main {

    public static void main(String[] args) {
	// write your code here

        //instead of using to many if/else statements we can use the "switch" statement instead.
        int value = 1;
        if(value == 1){
            System.out.println("value is 1");
        }else if(value == 2){
            System.out.println("value is 2");
        }else{
            System.out.println("value is to high");
        }

        //now use switch statement instead of if/else
        // the passed value MUST match the case value to be true. the case value can be a int or string
        // but if/else statement are more flexible because you can pass more than value to test. you can only pass one value with switch
        
        int switchValue = 5;
         
         switch(switchValue){
            //all switch code stays in one block.
            case 5:
                System.out.println("value is 5");
                break;
            case 2:
                System.out.println("value is 25");
                break;

            default:
                System.out.println("value is not correct it should be 5");
                break;
        }


    }
}



public class Main {

    public static void main(String[] args) {
	// write your code here
        //for loops

        System.out.println("my bank $5,000 loan with interest rate of 1% = " + bankLoan(5000.00, 1.0));
        System.out.println("my bank $5,000 loan with interest rate of 2% = " + bankLoan(5000.00, 2.0));
        System.out.println("my bank $5,000 loan with interest rate of 3% = " + bankLoan(5000.00, 3.0));
        System.out.println("my bank $5,000 loan with interest rate of 4% = " + bankLoan(5000.00, 4.0));

        /*
            for(init; termination; increment){
             // code
             the code will loop while its true and stops once it becomes true
             }
         */

        for(int i=0; i<5; i++){ //notice 0 is less than 5 so its true so it keeps looping until its false
            System.out.println("how many times can i loop " + i);
        }

    }

    public static double bankLoan(double loan, double interestRate){
        return ( loan * ( interestRate/100) );
    }

}



public class Main {

    public static void main(String[] args) {
	// write your code here
        //for loops

      /*  System.out.println("my bank $5,000 loan with interest rate of 1% = " + bankLoan(5000.00, 1.0));
        System.out.println("my bank $5,000 loan with interest rate of 2% = " + bankLoan(5000.00, 2.0));
        System.out.println("my bank $5,000 loan with interest rate of 3% = " + bankLoan(5000.00, 3.0));
        System.out.println("my bank $5,000 loan with interest rate of 4% = " + bankLoan(5000.00, 4.0));
*/
        /*
            for(init; termination; increment){
             // code
             the code will loop while its true and stops once it becomes true
             }
         */

        for(int i=2; i<9; i++){ //notice 0 is less than 5 so its true so it keeps looping until its false
            System.out.println("my bank $5,000 loan with interest rate of " + i + "% = " + bankLoan(5000.00, i)); //i could had passed (double) i, but java knows how to handle it as a double
        }

    }

    public static double bankLoan(double loan, double interestRate){
        return ( loan * ( interestRate/100) );
    }

}



public class Main {

    public static void main(String[] args) {
	// write your code here
        //for loops

      /*  System.out.println("my bank $5,000 loan with interest rate of 1% = " + bankLoan(5000.00, 1.0));
        System.out.println("my bank $5,000 loan with interest rate of 2% = " + bankLoan(5000.00, 2.0));
        System.out.println("my bank $5,000 loan with interest rate of 3% = " + bankLoan(5000.00, 3.0));
        System.out.println("my bank $5,000 loan with interest rate of 4% = " + bankLoan(5000.00, 4.0));
*/
        /*
            for(init; termination; increment){
             // code
             the code will loop while its true and stops once it becomes true
             }
         */

        for(int i=8; i>=2; i--){ //now its saying "i" is greater than or equal to two and deincrment till its two
            System.out.println("my bank $5,000 loan with interest rate of " + i + "% = " + bankLoan(5000.00, i)); //i could had passed (double) i, but java knows how to handle it as a double
        }

    }

    public static double bankLoan(double loan, double interestRate){
        return ( loan * ( interestRate/100) );
    }

}


public class Main {

    public static void main(String[] args) {
	// write your code here

        //while loop
         int count = 1;
        while(count !=6){
            System.out.println("the while loop count is now: " + count);
            count++; //make sure the counter 'count++' is inside the while loop or it will run for ever.
        }


        //while loop with a break
        int mycount = 1;
        while(true){
            if(mycount == 6){ //when the expression is true we break out the loop
                break; 
            }
            System.out.println("the while loop mycount with break statement is now: " + mycount);
            mycount++;
        }
     

        //do while loop is garenteed to run at least once.

        int doWhileLoop = 1;
        do{
            System.out.println("do while loop: " + doWhileLoop);
            doWhileLoop++;
        }while(doWhileLoop !=6);



        //for loop
        for(int i=1; i<6; i++){
            System.out.println("the for loop count is now : " + i);
        }

    }

}


public class Main {

    public static void main(String[] args) {
        // write your code here

        //how to get a true or false to see if the number is even or not.

        int number = 5;
        int finishedNumber = 20;
        while(number <= finishedNumber){
            if(!isEvenNumber(number)){
                number++;
                continue; //continue means stop and continue to the testing
            }
            System.out.println("this is and even number: " + number);
            number++;
        }

    }

    public static boolean isEvenNumber(int number){
        if((number % 2 ) == 0){
            return true;
        }else{
            return false;
        }
    }
}

/* OOP in JAVA */
/* know your getters and setters */
/* two files for a basic OOP setup for class enheratance. Main.java & Car.java*/

/* Car.Java */
public class Car {
    //these private variables are called fields. this is where we state the behavior
    // or you can write public instead but this something you SHOULD NEVER DO! Instead write a public method!
    private int doors;
    private int wheels;
    private String model;
    private String engine;
    private String color;

    //create a method to access the private variables with getters and setters
    public void setModel(String model){
        this.model = model; //this lines means update the above private variables that where passed in
    }

    public String getModel(){
        return this.model;
    }

}

/* Main.java */
public class Main {

    //section 7 lecture 38 in java video MASTER THESE two OOP basic set up
    public static void main(String[] args) {
	// write your code here
        //create and object called porche & toyota from the template car
        Car porche = new Car();
        Car toyota = new Car();

        //getters and setters
        porche.setModel("Carrera");
        System.out.println("my porche model is: " + porche.getModel());

    }
}




